# gui/main_window.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

import tkinter as tk
from tkinter import ttk, messagebox
from typing import Optional

from gui.login_window import LoginWindow
from gui.register_window import RegisterWindow
from models.user import User
from auth.password_auth import PasswordAuthenticator
from auth.keystroke_auth import KeystrokeAuthenticator
import config
from config import APP_NAME, WINDOW_WIDTH, WINDOW_HEIGHT, FONT_FAMILY, FONT_SIZE

class MainWindow:
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title(APP_NAME)
        self.root.geometry(f"{WINDOW_WIDTH}x{WINDOW_HEIGHT}")
        self.root.resizable(True, True)
        self.root.minsize(WINDOW_WIDTH, WINDOW_HEIGHT)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.center_window()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.password_auth = PasswordAuthenticator()
        self.keystroke_auth = KeystrokeAuthenticator()
        
        # –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        self.current_user: Optional[User] = None
        
        # –°—Ç–∏–ª–∏
        self.setup_styles()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{x}+{y}")
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
        style.configure('Title.TLabel', font=(FONT_FAMILY, 20, 'bold'))
        style.configure('Header.TLabel', font=(FONT_FAMILY, 14, 'bold'))
        style.configure('Info.TLabel', font=(FONT_FAMILY, FONT_SIZE))
        style.configure('Success.TLabel', foreground='green')
        style.configure('Error.TLabel', foreground='red')
        style.configure('Big.TButton', font=(FONT_FAMILY, 12), padding=10)
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(self.root, padding=20)
        title_frame.pack(fill=tk.X)
        
        title_label = ttk.Label(
            title_frame,
            text="–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            style='Title.TLabel'
        )
        title_label.pack()
        
        subtitle_label = ttk.Label(
            title_frame,
            text="—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à",
            style='Info.TLabel'
        )
        subtitle_label.pack()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        self.main_frame = ttk.Frame(self.root, padding=20)
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
        self.show_welcome_screen()
    
    def show_welcome_screen(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        self.clear_main_frame()
        
        welcome_frame = ttk.Frame(self.main_frame)
        welcome_frame.pack(expand=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        info_text = """
        –≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤–∞ —Ñ–∞–∫—Ç–æ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:
        1. –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        2. –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        
        –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç:
        ‚Ä¢ –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∞–≤–∏—à
        ‚Ä¢ –í—Ä–µ–º—è –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏
        ‚Ä¢ –û–±—â–∏–π —Ä–∏—Ç–º –ø–µ—á–∞—Ç–∏
        """
        
        info_label = ttk.Label(
            welcome_frame,
            text=info_text,
            style='Info.TLabel',
            justify=tk.LEFT
        )
        info_label.pack(pady=20)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(welcome_frame)
        button_frame.pack(pady=20)
        
        login_btn = ttk.Button(
            button_frame,
            text="–í–æ–π—Ç–∏",
            style='Big.TButton',
            command=self.show_login
        )
        login_btn.grid(row=0, column=0, padx=10)
        
        register_btn = ttk.Button(
            button_frame,
            text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            style='Big.TButton',
            command=self.show_register
        )
        register_btn.grid(row=0, column=1, padx=10)
    
    def show_login(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –≤—Ö–æ–¥–∞"""
        login_window = LoginWindow(
            self.root,
            self.password_auth,
            self.keystroke_auth,
            self.on_login_success
        )
    
    def show_register(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        register_window = RegisterWindow(
            self.root,
            self.password_auth,
            self.keystroke_auth,
            self.on_register_success
        )
    
    def on_login_success(self, user: User):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"""
        self.current_user = user
        self.show_user_dashboard()
    
    def show_user_dashboard(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

        # üîç –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        print(f"\n=== –û–¢–õ–ê–î–ö–ê –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.current_user.username} ===")
        self.password_auth.db.debug_user_samples(self.current_user.id)

        self.clear_main_frame()
    
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        header_frame = ttk.Frame(self.main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 20))
    
        welcome_label = ttk.Label(
            header_frame,
            text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {self.current_user.username}!",
            style='Header.TLabel'
        )
        welcome_label.pack()
    
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –æ–±—É—á–µ–Ω–∏—è
        status_frame = ttk.LabelFrame(self.main_frame, text="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", padding=15)
        status_frame.pack(fill=tk.X, pady=10)
    
        training_progress = self.keystroke_auth.get_training_progress(self.current_user)
    
        if self.current_user.is_trained:
            status_text = "‚úì –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
            status_style = 'Success.TLabel'
        else:
            status_text = f"‚ö† –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—É—á–µ–Ω–∏–µ ({training_progress['current_samples']}/{training_progress['required_samples']} –æ–±—Ä–∞–∑—Ü–æ–≤)"
            status_style = 'Error.TLabel'
    
        status_label = ttk.Label(status_frame, text=status_text, style=status_style)
        status_label.pack()
    
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        if not self.current_user.is_trained:
            progress_bar = ttk.Progressbar(
                status_frame,
                value=training_progress['progress_percent'],
                maximum=100,
                length=300
            )
            progress_bar.pack(pady=10)
    
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = ttk.LabelFrame(self.main_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", padding=15)
        stats_frame.pack(fill=tk.X, pady=10)
    
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            training_samples = self.password_auth.db.get_user_training_samples(self.current_user.id)
            training_samples_count = len(training_samples)
        
            # ‚úÖ –°—á–∏—Ç–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
            all_samples = self.password_auth.db.get_user_keystroke_samples(self.current_user.id, training_only=False)
            auth_attempts_only = len(all_samples) - training_samples_count
        
            stats_text = f"""
    –û–±—É—á–∞—é—â–∏—Ö –æ–±—Ä–∞–∑—Ü–æ–≤: {training_samples_count}
    –ü–æ–ø—ã—Ç–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {auth_attempts_only}
    –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(all_samples)}
    –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {self.current_user.created_at.strftime('%d.%m.%Y')}
            """
        
            stats_label = ttk.Label(stats_frame, text=stats_text.strip(), justify=tk.LEFT)
            stats_label.pack()
        
        except Exception as e:
            error_label = ttk.Label(stats_frame, text=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", style='Error.TLabel')
            error_label.pack()
    
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_frame = ttk.Frame(self.main_frame)
        actions_frame.pack(fill=tk.X, pady=20)
    
        if not self.current_user.is_trained:
            train_btn = ttk.Button(
                actions_frame,
                text="–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ",
                command=self.start_training,
                style='Big.TButton'
            )
            train_btn.pack(pady=5)
        else:
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            test_btn = ttk.Button(
                actions_frame,
                text="–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                command=self.test_authentication,
                style='Big.TButton'
            )
            test_btn.pack(pady=5)
        
            stats_btn = ttk.Button(
                actions_frame,
                text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏",
                command=self.show_model_stats,
                style='Big.TButton'
            )
            stats_btn.pack(pady=5)
        
            retrain_btn = ttk.Button(
                actions_frame,
                text="–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å",
                command=self.reset_and_retrain
            )
            retrain_btn.pack(pady=5)
    
        # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω—ã)
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        export_btn = ttk.Button(
            actions_frame,
            text="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å CSV —Ñ–∞–π–ª–∞–º–∏",
            command=self.open_csv_folder
        )
        export_btn.pack(pady=5)
    
        logout_btn = ttk.Button(
            actions_frame,
            text="–í—ã–π—Ç–∏",
            command=self.logout
        )
        logout_btn.pack(pady=5)
    
    def start_training(self):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è"""
        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è
        choice = messagebox.askyesnocancel(
            "–í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è",
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–±—É—á–µ–Ω–∏—è:\n\n"
            "–î–ê - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ (—Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π)\n"
            "–ù–ï–¢ - –ë–∞–∑–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–±—ã—Å—Ç—Ä–æ–µ)\n"
            "–û–¢–ú–ï–ù–ê - –û—Ç–º–µ–Ω–∏—Ç—å"
        )
    
        if choice is None:  # –û—Ç–º–µ–Ω–∞
            return
        elif choice:  # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            from gui.enhanced_training_window import EnhancedTrainingWindow
            EnhancedTrainingWindow(
                self.root,
                self.current_user,
                self.keystroke_auth,
                self.on_training_complete
            )
        else:  # –ë–∞–∑–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            from gui.training_window import TrainingWindow
            TrainingWindow(
                self.root,
                self.current_user,
                self.keystroke_auth,
                self.on_training_complete
            )
    
    def test_authentication(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        self.logout()
        self.show_login()
    
    def reset_and_retrain(self):
        """–°–±—Ä–æ—Å –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        if messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –º–æ–¥–µ–ª—å –∏ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ?"
        ):
            success, message = self.keystroke_auth.reset_user_model(self.current_user)
            if success:
                self.current_user.is_trained = False
                self.show_user_dashboard()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", message)
    
    def on_training_complete(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î
        updated_user = self.password_auth.db.get_user_by_username(self.current_user.username)
        if updated_user:
            self.current_user = updated_user
        self.show_user_dashboard()
    
    def show_model_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ–ª–∏"""
        if not self.current_user:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return
    
        if not self.current_user.is_trained:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–±—É—á–µ–Ω–∞")
            return
    
        try:
            from gui.model_stats_window import ModelStatsWindow
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º self.root –≤–º–µ—Å—Ç–æ self.window
            ModelStatsWindow(self.root, self.current_user, self.keystroke_auth)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            print(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            import traceback
            traceback.print_exc()
    
    def open_csv_folder(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ —Å CSV —Ñ–∞–π–ª–∞–º–∏"""
        import os
        import subprocess
        import platform
        
        csv_dir = os.path.join(config.DATA_DIR, "csv_exports")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(csv_dir, exist_ok=True)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ
        if platform.system() == 'Windows':
            os.startfile(csv_dir)
        elif platform.system() == 'Darwin':  # macOS
            subprocess.Popen(['open', csv_dir])
        else:  # Linux
            subprocess.Popen(['xdg-open', csv_dir])
        
        messagebox.showinfo(
            "CSV —Ñ–∞–π–ª—ã",
            f"–ü–∞–ø–∫–∞ —Å CSV —Ñ–∞–π–ª–∞–º–∏ –æ—Ç–∫—Ä—ã—Ç–∞.\n\n–ü—É—Ç—å: {csv_dir}\n\n"
            "–§–∞–π–ª—ã:\n"
            "‚Ä¢ user_[–∏–º—è]_keystroke_data.csv - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—Ä–∞–∑—Ü–∞–º\n"
            "‚Ä¢ user_[–∏–º—è]_raw_keystrokes.csv - —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏–π"
        )
    
    def logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        self.current_user = None
        self.show_welcome_screen()
    
    def clear_main_frame(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞"""
        for widget in self.main_frame.winfo_children():
            widget.destroy()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()
    
    def on_register_success(self, user: User):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        messagebox.showinfo(
            "–£—Å–ø–µ—Ö",
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã."
        )
        self.current_user = user
        self.show_user_dashboard()