# gui/login_window.py - –û–∫–Ω–æ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É

import tkinter as tk
from tkinter import ttk, messagebox
import time
from typing import Callable, Optional

from models.user import User
from auth.password_auth import PasswordAuthenticator
from auth.keystroke_auth import KeystrokeAuthenticator
from config import FONT_FAMILY, FONT_SIZE, PANGRAM

class LoginWindow:
    """–û–∫–Ω–æ –≤—Ö–æ–¥–∞ —Å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    
    def __init__(self, parent, password_auth: PasswordAuthenticator, 
                 keystroke_auth: KeystrokeAuthenticator, on_success: Callable):
        self.parent = parent
        self.password_auth = password_auth
        self.keystroke_auth = keystroke_auth
        self.on_success = on_success
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.window = tk.Toplevel(parent)
        self.window.title("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        self.window.geometry("550x650")
        self.window.resizable(True, True)
        self.window.minsize(500, 600)
        
        # –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        self.window.transient(parent)
        self.window.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.center_window()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.current_user: Optional[User] = None
        self.session_id: Optional[str] = None
        self.is_recording = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.username_entry.focus()
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        self.window.update_idletasks()
        width = self.window.winfo_width()
        height = self.window.winfo_height()
        x = (self.window.winfo_screenwidth() // 2) - (width // 2)
        y = (self.window.winfo_screenheight() // 2) - (height // 2)
        self.window.geometry(f"{width}x{height}+{x}+{y}")
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –æ–∫–Ω–∞ –≤—Ö–æ–¥–∞"""
        main_frame = ttk.Frame(self.window, padding=30)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(
            main_frame,
            text="–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É",
            font=(FONT_FAMILY, 18, 'bold')
        )
        title_label.pack(pady=(0, 20))
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ttk.Label(main_frame, text="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:").pack(anchor=tk.W, pady=(10, 5))
        self.username_entry = ttk.Entry(main_frame, width=30, font=(FONT_FAMILY, FONT_SIZE))
        self.username_entry.pack(fill=tk.X)
        
        # –ü–∞—Ä–æ–ª—å
        ttk.Label(main_frame, text="–ü–∞—Ä–æ–ª—å:").pack(anchor=tk.W, pady=(20, 5))
        self.password_entry = ttk.Entry(
            main_frame, 
            width=30, 
            show="*",
            font=(FONT_FAMILY, FONT_SIZE)
        )
        self.password_entry.pack(fill=tk.X)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(
            main_frame,
            text="",
            foreground="blue"
        )
        self.status_label.pack(pady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–∞—Ç–∏–π
        self.recording_frame = ttk.LabelFrame(
            main_frame,
            text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π",
            padding=10
        )
        self.recording_frame.pack(fill=tk.BOTH, expand=True, pady=20)
        
        ttk.Label(
            self.recording_frame,
            text="–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –≤–≤–µ–¥–∏—Ç–µ –ø–∞–Ω–≥—Ä–∞–º–º—É:",
            wraplength=300,
            justify=tk.CENTER
        ).pack()
        
        self.pangram_label = ttk.Label(
            self.recording_frame,
            text=f'"{PANGRAM}"',
            font=(FONT_FAMILY, 11, 'bold'),
            foreground='darkblue',
            wraplength=350
        )
        self.pangram_label.pack(pady=10)
        
        self.pangram_entry = ttk.Entry(
            self.recording_frame,
            width=45,
            font=(FONT_FAMILY, FONT_SIZE)
        )
        self.pangram_entry.pack(pady=5)
        
        self.recording_status = ttk.Label(
            self.recording_frame,
            text="",
            font=(FONT_FAMILY, 10)
        )
        self.recording_status.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(pady=20)
        
        self.login_btn = ttk.Button(
            button_frame,
            text="–í–æ–π—Ç–∏",
            command=self.login,
            width=15
        )
        self.login_btn.grid(row=0, column=0, padx=5)
        
        cancel_btn = ttk.Button(
            button_frame,
            text="–û—Ç–º–µ–Ω–∞",
            command=self.window.destroy,
            width=15
        )
        cancel_btn.grid(row=0, column=1, padx=5)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ Enter –∫ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞
        self.window.bind('<Return>', lambda e: self.login())
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∏–Ω–∞–º–∏–∫–∏
        self.setup_keystroke_recording()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        self.password_entry.bind('<Return>', lambda e: self.pangram_entry.focus())
    
    def setup_keystroke_recording(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –¥–ª—è –ø–æ–ª—è –ø–∞–Ω–≥—Ä–∞–º–º—ã"""
        self.pangram_entry.bind('<FocusIn>', self.start_recording)
        self.pangram_entry.bind('<FocusOut>', self.stop_recording)
        self.pangram_entry.bind('<KeyPress>', self.on_key_press)
        self.pangram_entry.bind('<KeyRelease>', self.on_key_release)
    
    def start_recording(self, event=None):
        """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –¥–∏–Ω–∞–º–∏–∫–∏"""
        if not self.is_recording and self.current_user:
            self.session_id = self.keystroke_auth.start_keystroke_recording(self.current_user.id)
            self.is_recording = True
            self.recording_status.config(
                text="üî¥ –ó–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–∞",
                foreground="red"
            )
    
    def stop_recording(self, event=None):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏"""
        if self.is_recording:
            self.is_recording = False
            self.recording_status.config(
                text="",
                foreground="black"
            )
    
    def on_key_press(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏"""
        if self.is_recording and self.session_id:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
            if event.keysym not in ['Shift_L', 'Shift_R', 'Control_L', 'Control_R', 
                                   'Alt_L', 'Alt_R', 'Caps_Lock', 'Tab']:
                self.keystroke_auth.record_key_event(
                    self.session_id,
                    event.keysym,
                    'press'
                )
    
    def on_key_release(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à–∏"""
        if self.is_recording and self.session_id:
            if event.keysym not in ['Shift_L', 'Shift_R', 'Control_L', 'Control_R', 
                                   'Alt_L', 'Alt_R', 'Caps_Lock', 'Tab']:
                self.keystroke_auth.record_key_event(
                    self.session_id,
                    event.keysym,
                    'release'
                )
    
    def login(self):
        """–ü—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
        username = self.username_entry.get().strip()
        password = self.password_entry.get()
        pangram_text = self.pangram_entry.get()
        
        if not username or not password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å")
            return
        
        # –ü–µ—Ä–≤—ã–π —Ñ–∞–∫—Ç–æ—Ä - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        self.status_label.config(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...", foreground="blue")
        self.window.update()
        
        success, message, user = self.password_auth.authenticate(username, password)
        
        if not success:
            self.status_label.config(text="", foreground="red")
            messagebox.showerror("–û—à–∏–±–∫–∞", message)
            self.password_entry.delete(0, tk.END)
            return
        
        self.current_user = user
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–±—É—á–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
        if not user.is_trained:
            messagebox.showinfo(
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                "–ú–æ–¥–µ–ª—å –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–µ –æ–±—É—á–µ–Ω–∞.\n–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –ø–∞—Ä–æ–ª—é."
            )
            self.on_success(user)
            self.window.destroy()
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–Ω–≥—Ä–∞–º–º—ã
        if pangram_text != PANGRAM:
            messagebox.showerror(
                "–û—à–∏–±–∫–∞",
                "–í–≤–µ–¥–∏—Ç–µ –ø–∞–Ω–≥—Ä–∞–º–º—É —Ç–æ—á–Ω–æ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π"
            )
            return
        
        # –í—Ç–æ—Ä–æ–π —Ñ–∞–∫—Ç–æ—Ä - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π
        if self.session_id:
            self.status_label.config(text="–ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π...", foreground="blue")
            self.window.update()
            
            try:
                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                features = self.keystroke_auth.finish_recording(self.session_id)
                
                # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ
                auth_success, confidence, auth_message = self.keystroke_auth.authenticate(
                    user, 
                    features
                )
                
                if auth_success:
                    self.status_label.config(
                        text=f"‚úì {auth_message}",
                        foreground="green"
                    )
                    self.window.update()
                    time.sleep(1)  # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    
                    self.on_success(user)
                    self.window.destroy()
                else:
                    self.status_label.config(text="", foreground="red")
                    messagebox.showerror(
                        "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                        f"{auth_message}\n\n–î–∏–Ω–∞–º–∏–∫–∞ –Ω–∞–±–æ—Ä–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                    )
                    self.password_entry.delete(0, tk.END)
                    self.pangram_entry.delete(0, tk.END)
                    self.current_user = None
                    
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∏–Ω–∞–º–∏–∫–∏: {str(e)}")
                self.password_entry.delete(0, tk.END)
                self.pangram_entry.delete(0, tk.END)
        else:
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                "–î–∏–Ω–∞–º–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–µ –±—ã–ª–∞ –∑–∞–ø–∏—Å–∞–Ω–∞.\n–í–≤–µ–¥–∏—Ç–µ –ø–∞–Ω–≥—Ä–∞–º–º—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
            )