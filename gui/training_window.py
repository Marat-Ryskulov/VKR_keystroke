# gui/training_window.py - –û–∫–Ω–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏–∫–µ –Ω–∞–∂–∞—Ç–∏–π

import tkinter as tk
from tkinter import ttk, messagebox
import time
from typing import Callable

from models.user import User
from auth.keystroke_auth import KeystrokeAuthenticator
from config import FONT_FAMILY, FONT_SIZE, MIN_TRAINING_SAMPLES, PANGRAM

class TrainingWindow:
    """–û–∫–Ω–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏–∫–µ –Ω–∞–∂–∞—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, parent, user: User, keystroke_auth: KeystrokeAuthenticator, on_complete: Callable):
        self.parent = parent
        self.user = user
        self.keystroke_auth = keystroke_auth
        self.on_complete = on_complete
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.window = tk.Toplevel(parent)
        self.window.title("–û–±—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
        self.window.geometry("700x750")
        self.window.resizable(True, True)
        self.window.minsize(600, 700)
        
        # –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        self.window.transient(parent)
        self.window.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.center_window()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.session_id = None
        self.is_recording = False
        self.current_sample = 0
        self.training_text = PANGRAM  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–Ω–≥—Ä–∞–º–º—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.update_progress()
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        self.window.update_idletasks()
        width = self.window.winfo_width()
        height = self.window.winfo_height()
        x = (self.window.winfo_screenwidth() // 2) - (width // 2)
        y = (self.window.winfo_screenheight() // 2) - (height // 2)
        self.window.geometry(f"{width}x{height}+{x}+{y}")
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –æ–∫–Ω–∞ –æ–±—É—á–µ–Ω–∏—è"""
        main_frame = ttk.Frame(self.window, padding=30)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(
            main_frame,
            text="–û–±—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏–∫–µ –Ω–∞–∂–∞—Ç–∏–π",
            font=(FONT_FAMILY, 16, 'bold')
        )
        title_label.pack(pady=(0, 10))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_text = f"""–î–ª—è –æ–±—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∞—à–µ–º—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É —Å—Ç–∏–ª—é –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ {MIN_TRAINING_SAMPLES} —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â—É—é –ø–∞–Ω–≥—Ä–∞–º–º—É:

"{PANGRAM}"

–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø–µ—á–∞—Ç–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç–µ.
–≠—Ç–æ –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 10-15 –º–∏–Ω—É—Ç."""
        
        info_label = ttk.Label(
            main_frame,
            text=info_text,
            wraplength=400,
            justify=tk.CENTER
        )
        info_label.pack(pady=10)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        progress_frame = ttk.LabelFrame(main_frame, text="–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è", padding=15)
        progress_frame.pack(fill=tk.X, pady=20)
        
        self.progress_label = ttk.Label(
            progress_frame,
            text="",
            font=(FONT_FAMILY, 12)
        )
        self.progress_label.pack()
        
        self.progress_bar = ttk.Progressbar(
            progress_frame,
            length=400,
            mode='determinate',
            maximum=MIN_TRAINING_SAMPLES
        )
        self.progress_bar.pack(pady=10)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        input_frame = ttk.LabelFrame(main_frame, text="–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –≤–≤–æ–¥", padding=15)
        input_frame.pack(fill=tk.X, pady=10)
        
        self.pangram_label = ttk.Label(
            input_frame,
            text=f'–í–≤–µ–¥–∏—Ç–µ: "{PANGRAM}"',
            font=(FONT_FAMILY, 11, 'bold'),
            foreground='darkblue'
        )
        self.pangram_label.pack(pady=(0, 10))
        
        self.text_entry = ttk.Entry(
            input_frame,
            width=50,
            font=(FONT_FAMILY, FONT_SIZE)
        )
        self.text_entry.pack()
        
        self.status_label = ttk.Label(
            input_frame,
            text="",
            font=(FONT_FAMILY, 10)
        )
        self.status_label.pack(pady=5)
        
        # –°–æ–≤–µ—Ç—ã
        tips_frame = ttk.LabelFrame(main_frame, text="–°–æ–≤–µ—Ç—ã", padding=10)
        tips_frame.pack(fill=tk.X, pady=10)
        
        tips_text = """‚Ä¢ –ü–µ—á–∞—Ç–∞–π—Ç–µ –≤ —Å–≤–æ–µ–º –æ–±—ã—á–Ω–æ–º —Ç–µ–º–ø–µ
‚Ä¢ –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –ø–µ—á–∞—Ç–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ
‚Ä¢ –†–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å –∏ –ø–µ—á–∞—Ç–∞–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ
‚Ä¢ –ï—Å–ª–∏ –æ—à–∏–±–ª–∏—Å—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ"""
        
        tips_label = ttk.Label(
            tips_frame,
            text=tips_text,
            justify=tk.LEFT,
            font=(FONT_FAMILY, 10)
        )
        tips_label.pack()
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(pady=20)
        
        self.submit_btn = ttk.Button(
            button_frame,
            text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞–∑–µ—Ü",
            command=self.submit_sample,
            state=tk.DISABLED
        )
        self.submit_btn.grid(row=0, column=0, padx=5)
        
        self.train_btn = ttk.Button(
            button_frame,
            text="–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å",
            command=self.train_model,
            state=tk.DISABLED
        )
        self.train_btn.grid(row=0, column=1, padx=5)
        
        cancel_btn = ttk.Button(
            button_frame,
            text="–û—Ç–º–µ–Ω–∞",
            command=self.window.destroy
        )
        cancel_btn.grid(row=0, column=2, padx=5)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.setup_keystroke_recording()
        self.text_entry.bind('<Return>', lambda e: self.submit_sample())
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.text_entry.focus()
    
    def setup_keystroke_recording(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π"""
        self.text_entry.bind('<FocusIn>', self.start_recording)
        self.text_entry.bind('<FocusOut>', self.stop_recording)
        self.text_entry.bind('<KeyPress>', self.on_key_press)
        self.text_entry.bind('<KeyRelease>', self.on_key_release)
        self.text_entry.bind('<KeyRelease>', self.check_input, add='+')
    
    def start_recording(self, event=None):
        """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏"""
        if not self.is_recording:
            self.session_id = self.keystroke_auth.start_keystroke_recording(self.user.id)
            self.is_recording = True
            self.status_label.config(
                text="üî¥ –ó–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–∞",
                foreground="red"
            )
    
    def stop_recording(self, event=None):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏"""
        if self.is_recording:
            self.is_recording = False
            self.status_label.config(
                text="–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
                foreground="gray"
            )
    
    def on_key_press(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏"""
        if self.is_recording and self.session_id:
            if event.keysym not in ['Shift_L', 'Shift_R', 'Control_L', 'Control_R', 
                                   'Alt_L', 'Alt_R', 'Caps_Lock', 'Tab']:
                self.keystroke_auth.record_key_event(
                    self.session_id,
                    event.keysym,
                    'press'
                )
    
    def on_key_release(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à–∏"""
        if self.is_recording and self.session_id:
            if event.keysym not in ['Shift_L', 'Shift_R', 'Control_L', 'Control_R', 
                                   'Alt_L', 'Alt_R', 'Caps_Lock', 'Tab']:
                self.keystroke_auth.record_key_event(
                    self.session_id,
                    event.keysym,
                    'release'
                )
    
    def check_input(self, event=None):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–∞–Ω–≥—Ä–∞–º–º–æ–π
        if self.text_entry.get() == PANGRAM:
            self.submit_btn.config(state=tk.NORMAL)
            self.status_label.config(
                text="‚úì –¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
                foreground="green"
            )
        else:
            self.submit_btn.config(state=tk.DISABLED)
            if len(self.text_entry.get()) > 0:
                self.status_label.config(
                    text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ç–æ—á–Ω–æ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤—ã—à–µ",
                    foreground="orange"
                )
    
    def submit_sample(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞"""
        if self.text_entry.get() != PANGRAM:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –ø–∞–Ω–≥—Ä–∞–º–º—É —Ç–æ—á–Ω–æ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ")
            return
        
        if self.session_id and self.is_recording:
            try:
                # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
                self.stop_recording()
                
                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                features = self.keystroke_auth.finish_recording(self.session_id, is_training=True)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
                self.current_sample += 1
                
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                self.status_label.config(
                    text=f"‚úì –û–±—Ä–∞–∑–µ—Ü {self.current_sample} —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
                    foreground="green"
                )
                
                # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è
                self.text_entry.delete(0, tk.END)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                self.update_progress()
                
                # –§–æ–∫—É—Å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –ø–æ–ª–µ
                self.text_entry.focus()
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞–∑—Ü–∞: {str(e)}")
        else:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏")
    
    def update_progress(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
        progress = self.keystroke_auth.get_training_progress(self.user)
        
        self.current_sample = progress['current_samples']
        self.progress_label.config(
            text=f"–û–±—Ä–∞–∑—Ü–æ–≤ —Å–æ–±—Ä–∞–Ω–æ: {progress['current_samples']} –∏–∑ {progress['required_samples']}"
        )
        
        self.progress_bar['value'] = progress['current_samples']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ–±—É—á–µ–Ω–∏—é
        if progress['is_ready']:
            self.train_btn.config(state=tk.NORMAL)
            self.pangram_label.config(
                text=f"–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤ —Å–æ–±—Ä–∞–Ω–æ! –ú–æ–∂–µ—Ç–µ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å.",
                foreground="green"
            )
        else:
            remaining = progress['required_samples'] - progress['current_samples']
            self.pangram_label.config(
                text=f'–í–≤–µ–¥–∏—Ç–µ: "{PANGRAM}" (–æ—Å—Ç–∞–ª–æ—Å—å {remaining} —Ä–∞–∑)',
                foreground="darkblue"
            )
    
    def train_model(self):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        if messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏?\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        ):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            self.train_btn.config(state=tk.DISABLED, text="–û–±—É—á–µ–Ω–∏–µ...")
            self.window.update()
            
            try:
                # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                success, accuracy, message = self.keystroke_auth.train_user_model(self.user)
                
                if success:
                    messagebox.showinfo(
                        "–£—Å–ø–µ—Ö",
                        f"{message}\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é!"
                    )
                    self.on_complete()
                    self.window.destroy()
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", message)
                    self.train_btn.config(state=tk.NORMAL, text="–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")
                    
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {str(e)}")
                self.train_btn.config(state=tk.NORMAL, text="–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")