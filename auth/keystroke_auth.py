# auth/keystroke_auth.py - –ú–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ –Ω–∞–∂–∞—Ç–∏–π

from typing import Tuple, Optional, Dict
from datetime import datetime
import uuid

from models.user import User
from models.keystroke_data import KeystrokeData
from ml.model_manager import ModelManager
from utils.database import DatabaseManager
from utils.security import SecurityManager

class KeystrokeAuthenticator:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à"""
    
    def __init__(self):
        self.db = DatabaseManager()
        self.model_manager = ModelManager()
        self.security = SecurityManager()
        self.current_session = {}  # –¢–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–∞—Ç–∏–π
    
    def start_keystroke_recording(self, user_id: int) -> str:
        """
        –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç session_id
        """
        session_id = self.security.generate_session_id()
        
        self.current_session[session_id] = KeystrokeData(
            user_id=user_id,
            session_id=session_id,
            timestamp=datetime.now()
        )
        
        return session_id
    
    def record_key_event(self, session_id: str, key: str, event_type: str):
        """–ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏—à–∏"""
        if session_id not in self.current_session:
            raise ValueError("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        self.current_session[session_id].add_key_event(key, event_type)
    
    def finish_recording(self, session_id: str, is_training: bool = False) -> Dict[str, float]:
        """
        –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        """
        if session_id not in self.current_session:
            raise ValueError("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
        keystroke_data = self.current_session[session_id]
    
        # –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –≤—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        features = keystroke_data.calculate_features()
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±—ã–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã
        if not features:
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—Ä–∞–∑—Ü–∞")
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            features = {
                'avg_dwell_time': 0.0,
                'std_dwell_time': 0.0,
                'avg_flight_time': 0.0,
                'std_flight_time': 0.0,
                'typing_speed': 0.0,
                'total_typing_time': 0.0
            }
            keystroke_data.features = features
    
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –µ—Å–ª–∏ —ç—Ç–æ –æ–±—É—á–∞—é—â–∏–π –æ–±—Ä–∞–∑–µ—Ü
        if is_training:
            self.db.save_keystroke_sample(keystroke_data, is_training=True)
        
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–∂–∞—Ç–∏—è—Ö
            user = self.db.get_user_by_id(keystroke_data.user_id)
            if user:
                keystroke_data.save_raw_events_to_csv(user.id, user.username)
    
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Å—Å–∏–π
        del self.current_session[session_id]
    
        return features
    
    def authenticate(self, user, keystroke_features: Dict[str, float]) -> Tuple[bool, float, str]:
        """
        –í—Ç–æ—Ä–æ–π —Ñ–∞–∫—Ç–æ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
        """
        if not user.is_trained:
            return False, 0.0, "–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–±—É—á–µ–Ω–∞."
    
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        is_authenticated, confidence, detailed_stats = self.model_manager.authenticate_user_detailed(
            user.id, keystroke_features
        )
    
        # –ü–†–û–°–¢–û–ô –ö–û–ù–°–û–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó (–†–ê–ë–û–¢–ê–ï–¢ –í–°–ï–ì–î–ê)
        print(f"\n{'='*60}")
        print(f"üîç –ê–ù–ê–õ–ò–ó –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò - {user.username}")
        print(f"{'='*60}")
        print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –ü–†–ò–ù–Ø–¢' if is_authenticated else '‚ùå –û–¢–ö–õ–û–ù–ï–ù'}")
        print(f"üé≤ –§–∏–Ω–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}")
        print(f"üö™ –ü–æ—Ä–æ–≥ –ø—Ä–∏–Ω—è—Ç–∏—è: {detailed_stats.get('threshold', 0.75):.1%}")
        print()
    
        print("üìä –ö–û–ú–ü–û–ù–ï–ù–¢–ù–´–ô –ê–ù–ê–õ–ò–ó:")
        knn_conf = detailed_stats.get('knn_confidence', 0)
        dist_score = detailed_stats.get('distance_score', 0)
        feat_score = detailed_stats.get('feature_score', 0)
        weights = detailed_stats.get('weights', {'knn': 0.5, 'distance': 0.3, 'features': 0.2})
    
        print(f"‚îú‚îÄ KNN –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {knn_conf:.1%}")
        print(f"‚îú‚îÄ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π: {dist_score:.1%}")
        print(f"‚îú‚îÄ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {feat_score:.1%}")
        print()
    
        print("‚öñÔ∏è –í–ó–í–ï–®–ï–ù–ù–û–ï –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ò–ï:")
        knn_weighted = knn_conf * weights.get('knn', 0.5)
        dist_weighted = dist_score * weights.get('distance', 0.3)
        feat_weighted = feat_score * weights.get('features', 0.2)
    
        print(f"‚îú‚îÄ KNN: {knn_conf:.1%} √ó {weights.get('knn', 0.5):.1f} = {knn_weighted:.1%}")
        print(f"‚îú‚îÄ –†–∞—Å—Å—Ç–æ—è–Ω–∏—è: {dist_score:.1%} √ó {weights.get('distance', 0.3):.1f} = {dist_weighted:.1%}")
        print(f"‚îú‚îÄ –ü—Ä–∏–∑–Ω–∞–∫–∏: {feat_score:.1%} √ó {weights.get('features', 0.2):.1f} = {feat_weighted:.1%}")
        print(f"‚îî‚îÄ –ò–¢–û–ì–û: {confidence:.1%}")
        print()
    
        print("üìã –í–ê–®–ò –ü–†–ò–ó–ù–ê–ö–ò –ö–õ–ê–í–ò–ê–¢–£–†–ù–û–ì–û –ü–û–ß–ï–†–ö–ê:")
        print(f"‚îú‚îÄ –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∞–≤–∏—à: {keystroke_features.get('avg_dwell_time', 0)*1000:.1f} –º—Å")
        print(f"‚îú‚îÄ –í—Ä–µ–º—è –º–µ–∂–¥—É –∫–ª–∞–≤–∏—à–∞–º–∏: {keystroke_features.get('avg_flight_time', 0)*1000:.1f} –º—Å")
        print(f"‚îú‚îÄ –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏: {keystroke_features.get('typing_speed', 0):.1f} –∫–ª–∞–≤–∏—à/—Å–µ–∫")
        print(f"‚îî‚îÄ –û–±—â–µ–µ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞: {keystroke_features.get('total_typing_time', 0):.1f} —Å–µ–∫")
        print()
    
        print("üéØ –†–ï–®–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´:")
        if confidence >= detailed_stats.get('threshold', 0.75):
            print(f"‚úÖ {confidence:.1%} ‚â• {detailed_stats.get('threshold', 0.75):.1%} ‚Üí –î–û–°–¢–£–ü –†–ê–ó–†–ï–®–ï–ù")
            print("üí° –í–∞—à —Å—Ç–∏–ª—å –ø–µ—á–∞—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–±—É—á–µ–Ω–Ω–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é")
        else:
            print(f"‚ùå {confidence:.1%} < {detailed_stats.get('threshold', 0.75):.1%} ‚Üí –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù")
            print("üí° –°—Ç–∏–ª—å –ø–µ—á–∞—Ç–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
    
        print("="*60)
    
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å GUI –æ–∫–Ω–æ (–±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫)
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            analysis_data = {
                'user_name': user.username,
                'result': is_authenticated,
                'confidence': confidence,
                'threshold': detailed_stats.get('threshold', 0.75),
                'components': {
                    'knn': knn_conf,
                    'distance': dist_score,
                    'features': feat_score
                },
                'weights': weights,
                'keystroke_features': keystroke_features,
                'timestamp': datetime.now().isoformat()
            }
        
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            import json
            import os
            temp_dir = os.path.join(os.path.dirname(__file__), '..', 'temp')
            os.makedirs(temp_dir, exist_ok=True)
        
            with open(os.path.join(temp_dir, 'last_auth_analysis.json'), 'w') as f:
                json.dump(analysis_data, f, indent=2)
        
            print("üíæ –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
            print(f"üìÅ –§–∞–π–ª: {os.path.join(temp_dir, 'last_auth_analysis.json')}")
        
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
        if is_authenticated:
            message = f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})"
        else:
            message = f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})"

        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        try:
            self.db.save_auth_attempt(
                user_id=user.id,
                session_id=session_id if session_id else 'unknown',
                features=keystroke_features,
                knn_confidence=detailed_stats.get('knn_confidence', 0),
                distance_score=detailed_stats.get('distance_score', 0),
                feature_score=detailed_stats.get('feature_score', 0),
                final_confidence=confidence,
                threshold=detailed_stats.get('threshold', 0.75),
                result=is_authenticated
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    
        return is_authenticated, confidence, message
    
    def train_user_model(self, user: User) -> Tuple[bool, float, str]:
        """
        –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—É—Å–ø–µ—Ö, —Ç–æ—á–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        return self.model_manager.train_user_model(user.id)
    
    def get_training_progress(self, user: User) -> Dict[str, any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        samples = self.db.get_user_keystroke_samples(user.id, training_only=True)
        
        from config import MIN_TRAINING_SAMPLES
        
        return {
            'current_samples': len(samples),
            'required_samples': MIN_TRAINING_SAMPLES,
            'progress_percent': min(100, (len(samples) / MIN_TRAINING_SAMPLES) * 100),
            'is_ready': len(samples) >= MIN_TRAINING_SAMPLES,
            'is_trained': user.is_trained
        }
    
    def reset_user_model(self, user: User) -> Tuple[bool, str]:
        """–°–±—Ä–æ—Å –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            self.model_manager.delete_user_model(user.id)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—É—á–∞—é—â–∏—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ –∏–∑ –ë–î
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ DatabaseManager –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.is_trained = False
            user.training_samples = 0
            self.db.update_user(user)
            
            return True, "–ú–æ–¥–µ–ª—å –∏ –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã"
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –º–æ–¥–µ–ª–∏: {str(e)}"
    
    def get_authentication_stats(self, user: User) -> Dict[str, any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –û–¢–î–ï–õ–¨–ù–´–ï –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    
        # –û–±—É—á–∞—é—â–∏–µ –æ–±—Ä–∞–∑—Ü—ã (is_training = 1)
        training_samples = self.db.get_user_training_samples(user.id)
    
        # –í–°–ï –æ–±—Ä–∞–∑—Ü—ã
        all_samples = self.db.get_user_keystroke_samples(user.id, training_only=False)
    
        # –ü–æ–ø—ã—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ = –≤—Å–µ - –æ–±—É—á–∞—é—â–∏–µ
        auth_attempts = len(all_samples) - len(training_samples)
    
        return {
            'total_samples': len(all_samples),
            'training_samples': len(training_samples),  # ‚úÖ –¢–û–õ–¨–ö–û –æ–±—É—á–∞—é—â–∏–µ
            'authentication_attempts': max(0, auth_attempts),  # ‚úÖ –¢–û–õ–¨–ö–û –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞
            'model_info': self.model_manager.get_model_info(user.id)
        }